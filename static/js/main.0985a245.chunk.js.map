{"version":3,"sources":["reducer/rootReducer.js","TotalCase.js","StateCard.js","DistCases.js","DistrictCard.js","App.js","serviceWorker.js","index.js"],"names":["initialState","covid","rootReducer","state","axios","get","then","res","Object","assign","data","TotalCase","className","stsname","totalCases","i","districtData","confirmed","totalcase","this","props","covidProps","sname","active","totalactive","deceased","totaldeceased","recovered","totalrecovered","React","Component","connect","StateCard","State","covidData","setTimeout","setState","keys","getData","map","statename","Card","Body","Title","Text","to","pathname","statevalue","Button","variant","DistCases","dist","clasdist","DistrictCard","StateCode","District","location","slice","window","scrollTo","console","log","distname","App","history","createBrowserHistory","basename","process","exact","path","component","Boolean","hostname","match","ReactDOM","render","store","createStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0985a245.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst initialState = {\r\n    covid : {}\r\n}\r\nfunction rootReducer(state = initialState) {\r\n    axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(res => {\r\n        Object.assign(initialState.covid,res.data)     \r\n    })\r\n    return state;\r\n};\r\n  \r\nexport default rootReducer;","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n \r\nclass TotalCase extends React.Component{\r\n    render(){\r\n        function totalcase(covid,stsname){\r\n            var totalCases=0;\r\n            for(var i in covid[stsname].districtData){\r\n                totalCases += covid[stsname].districtData[i].confirmed;\r\n            }\r\n            return totalCases;\r\n        }\r\n        function totalactive(covid,stsname){\r\n            var totalCases=0;\r\n            for(var i in covid[stsname].districtData){\r\n                totalCases += covid[stsname].districtData[i].active;\r\n            }\r\n            return totalCases;\r\n        }function totaldeceased(covid,stsname){\r\n            var totalCases=0;\r\n            for(var i in covid[stsname].districtData){\r\n                totalCases += covid[stsname].districtData[i].deceased;\r\n            }\r\n            return totalCases;\r\n        }function totalrecovered(covid,stsname){\r\n            var totalCases=0;\r\n            for(var i in covid[stsname].districtData){\r\n                totalCases += covid[stsname].districtData[i].recovered;\r\n            }\r\n            return totalCases;\r\n        }\r\n        return(\r\n            <div className=\"total\">\r\n                <p className=\"text-primary\">Total Cases : {totalcase(this.props.covidProps,this.props.sname)}</p>\r\n                <p className=\"text-info\">Active Cases : {totalactive(this.props.covidProps,this.props.sname)}</p>\r\n                <p className=\"text-danger\">Total Death : {totaldeceased(this.props.covidProps,this.props.sname)}</p>\r\n                <p className=\"text-success\">Recovered : {totalrecovered(this.props.covidProps,this.props.sname)}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        covidProps : state.covid\r\n    } ;\r\n}\r\nexport default connect(mapStateToProps)(TotalCase)","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport './style.css'\r\nimport TotalCase from './TotalCase'\r\nimport {Link} from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nclass StateCard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            State:[],\r\n            covidData : props.covidProps\r\n        }   \r\n    }\r\n    getData(){\r\n        setTimeout(() => {\r\n            this.setState({State : Object.keys(this.state.covidData)})\r\n        },500)\r\n    }\r\n    componentWillMount(){\r\n        this.getData()\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div className=\"title\">\r\n                <h1>Covid' 19</h1>\r\n                <p>Noval Corona Virus 2020</p>\r\n            </div>\r\n            <div className=\"cards col-md-12\">\r\n                <div className=\"row padding\">\r\n                    {Object.keys(this.props.covidProps).map(  statename =>  ( \r\n                        <div className=\"col-md-4 padding\">\r\n                            <Card>\r\n                                <Card.Body>\r\n                                <Card.Title>{statename}</Card.Title>\r\n                                    <Card.Text>\r\n                                        <TotalCase sname={statename}/>\r\n                                    </Card.Text>\r\n                                    <Link to={{pathname:`/${statename}` , statevalue : {statename}}}>\r\n                                        <Button variant=\"primary\">More Info</Button>\r\n                                    </Link>\r\n                                </Card.Body>\r\n                            </Card>   \r\n                        </div>     \r\n                        ) \r\n                        )\r\n                    }   \r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    } \r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        covidProps : state.covid\r\n    } ;\r\n}\r\nexport default connect(mapStateToProps)(StateCard);\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nclass DistCases extends React.Component{\r\n    render(props){\r\n        var stsname=this.props.stsname;\r\n        var dist=this.props.dist;\r\n        return(\r\n            <div className=\"total\">\r\n                <p className=\"text-primary\">Total Cases : {this.props.covidProps[stsname].districtData[dist].confirmed}</p>\r\n                <p clasdist=\"text-info\">Active : {this.props.covidProps[stsname].districtData[dist].active}</p>\r\n                <p className=\"text-danger\">Death : {this.props.covidProps[stsname].districtData[dist].deceased}</p>\r\n                <p className=\"text-success\">Recovered :{this.props.covidProps[stsname].districtData[dist].recovered}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        covidProps : state.covid\r\n    } ;\r\n}\r\nexport default connect(mapStateToProps)(DistCases)","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Card from 'react-bootstrap/Card'\r\nimport DistCases from './DistCases'\r\nimport {connect} from 'react-redux'\r\nimport { useParams } from 'react'\r\n\r\nclass DistrictCard extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state= {\r\n            StateCode: null,\r\n            covid:this.props.covidProps,\r\n            District :[]\r\n        }\r\n    }\r\n    getData(){\r\n        setTimeout(() => {\r\n            this.setState({StateCode:this.props.location.pathname.slice(1)})\r\n            this.setState({District : Object.keys(this.state.covid[this.state.StateCode].districtData)})\r\n            \r\n        }, 500)\r\n      }\r\n    componentWillMount(){\r\n        window.scrollTo(0,0)\r\n        this.getData();\r\n    }\r\n    render(){\r\n        console.log(this.props.location.pathname.slice(1))\r\n        return(\r\n            <>\r\n            <div className=\"title\">\r\n                    <h1 >{this.state.StateCode}</h1>\r\n            </div>\r\n            <div className=\"cards row padding\">\r\n                \r\n                {this.state.District.map(distname =>(\r\n                <div className='col-md-4 padding'>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>{distname}</Card.Title>\r\n                                <Card.Text>\r\n                                    <DistCases stsname={this.state.StateCode} dist={distname}/>\r\n                                </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n            )\r\n\r\n            )}\r\n            </div>  \r\n            </> \r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        covidProps : state.covid\r\n    } ;\r\n}\r\nexport default connect(mapStateToProps)(DistrictCard)","import React from 'react';\nimport './style.css';\nimport StateCard from './StateCard'\nimport {HashRouter ,Route} from 'react-router-dom'\nimport DistrictCard from './DistrictCard';\nimport { createBrowserHistory } from \"history\";\nclass App extends React.Component {\n  render(){\n    const history = createBrowserHistory();\n    return (\n      <div className=\"App\">\n        <HashRouter  history={history} basename={process.env.PUBLIC_URL}>\n          <Route exact path=\"/\" component={ StateCard}/>\n          <Route exact path=\"/:state_id\" component={DistrictCard}/>\n        </HashRouter>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux';\nimport rootReducer from '../src/reducer/rootReducer'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={createStore(rootReducer)}> \n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}